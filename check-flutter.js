/**
 * Flutter Installation Checker
 * 
 * This script checks if Flutter is properly installed and available,
 * helping diagnose environment setup issues.
 */

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

// ANSI color codes
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

console.log(`${colors.bright}${colors.blue}============================================${colors.reset}`);
console.log(`${colors.bright}${colors.blue}       FLUTTER INSTALLATION CHECKER        ${colors.reset}`);
console.log(`${colors.bright}${colors.blue}============================================${colors.reset}`);
console.log('');

// Common Flutter installation paths
const commonPaths = [
  // Windows
  'C:\\flutter\\bin\\flutter.bat',
  path.join(process.env.LOCALAPPDATA || '', 'flutter', 'bin', 'flutter.bat'),
  path.join(process.env.USERPROFILE || '', 'flutter', 'bin', 'flutter.bat'),
  path.join(process.env.USERPROFILE || '', 'Documents', 'flutter', 'bin', 'flutter.bat'),
  path.join(process.env.USERPROFILE || '', 'development', 'flutter', 'bin', 'flutter.bat'),
  // Linux/macOS
  '/usr/local/flutter/bin/flutter',
  '/opt/flutter/bin/flutter',
  path.join(process.env.HOME || '', 'flutter', 'bin', 'flutter')
];

// Step 1: Check if Flutter is in PATH
console.log(`${colors.cyan}Step 1: Checking if Flutter is in PATH...${colors.reset}`);
exec('flutter --version', (error, stdout, stderr) => {
  if (error) {
    console.log(`${colors.red}✗ Flutter is not available in PATH${colors.reset}`);
    console.log(`${colors.yellow}ℹ Checking common installation locations...${colors.reset}`);
    
    // Check common installation paths
    let flutterFound = false;
    
    for (const flutterPath of commonPaths) {
      if (fs.existsSync(flutterPath)) {
        console.log(`${colors.green}✓ Found Flutter at: ${flutterPath}${colors.reset}`);
        flutterFound = true;
        
        // Try running Flutter from this path
        console.log(`${colors.cyan}Testing Flutter at this location...${colors.reset}`);
        exec(`"${flutterPath}" --version`, (err, output, stdErr) => {          if (err) {
            console.log(`${colors.red}✗ Flutter exists but failed to run from: ${flutterPath}${colors.reset}`);
            console.log(`${colors.yellow}Error: ${stdErr || err.message}${colors.reset}`);
          } else {
            console.log(`${colors.green}✓ Flutter is working!${colors.reset}`);
            console.log('');
            console.log(`${colors.bright}Flutter version information:${colors.reset}`);
            console.log(output);
            
            console.log('');
            console.log(`${colors.yellow}Would you like to create a configuration file for this Flutter path?${colors.reset}`);
            const readline = require('readline');
            const rl = readline.createInterface({
              input: process.stdin,
              output: process.stdout
            });
            
            rl.question(`${colors.cyan}Create flutter-config.js? (y/n) ${colors.reset}`, (answer) => {
              if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
                try {
                  // Create configuration file
                  const configContent = `/**
 * Flutter Path Configuration
 * Generated by check-flutter.js
 */

module.exports = {
  flutterPath: "${flutterPath.replace(/\\/g, '\\\\')}"
};
`;
                  fs.writeFileSync(path.join(__dirname, 'flutter-config.js'), configContent);
                  console.log(`${colors.green}✓${colors.reset} Configuration file created: flutter-config.js`);
                  console.log(`${colors.green}✓${colors.reset} You can now run the app with: .\\run-web-app.bat`);
                } catch (e) {
                  console.log(`${colors.red}✗${colors.reset} Failed to create configuration file: ${e.message}`);
                }
              } else {
                console.log(`${colors.yellow}Skipping configuration file creation.${colors.reset}`);
                console.log(`${colors.yellow}You can create it later with: .\\fix-flutter-path.bat${colors.reset}`);
              }
              rl.close();
            });
          }
        });
        
        break;
      }
    }
    
    if (!flutterFound) {
      console.log(`${colors.red}✗ Flutter not found in common locations${colors.reset}`);
      console.log('');
      console.log(`${colors.yellow}You need to install Flutter to run the web app:${colors.reset}`);
      console.log(`${colors.yellow}1. Download Flutter from: https://flutter.dev/docs/get-started/install${colors.reset}`);
      console.log(`${colors.yellow}2. Add Flutter to your PATH${colors.reset}`);
      console.log(`${colors.yellow}3. Run 'flutter doctor' to verify the installation${colors.reset}`);
    }
    
  } else {    // Flutter is in PATH
    console.log(`${colors.green}✓ Flutter is available in PATH${colors.reset}`);
    console.log('');
    console.log(`${colors.bright}Flutter version information:${colors.reset}`);
    console.log(stdout);
    
    // Check if Flutter web is enabled
    console.log('');
    console.log(`${colors.cyan}Step 2: Checking Flutter web support...${colors.reset}`);
    exec('flutter devices', (err, output, stdErr) => {
      const hasWebSupport = output.includes('Chrome') || 
                           output.includes('Web') || 
                           output.includes('web-server');
      
      if (hasWebSupport) {
        console.log(`${colors.green}✓ Flutter web support is enabled${colors.reset}`);
        console.log('');
        console.log(`${colors.green}✓ Your Flutter installation looks good!${colors.reset}`);
        console.log(`${colors.green}You should be able to run the web app using the launchers.${colors.reset}`);
        
        // Ask if they want to create a config file for this flutter path
        const flutterPath = stdout.split('\n')[0].match(/Flutter\s+\S+\s+(.+?)\s*$/);
        if (flutterPath && flutterPath[1]) {
          const path = flutterPath[1].trim();
          console.log('');
          console.log(`${colors.yellow}Would you like to create a configuration file for this Flutter path?${colors.reset}`);
          console.log(`${colors.cyan}Flutter path: ${path}${colors.reset}`);
          
          const readline = require('readline');
          const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
          });
          
          rl.question(`${colors.cyan}Create flutter-config.js? (y/n) ${colors.reset}`, (answer) => {
            if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
              try {
                // Create configuration file
                const configContent = `/**
 * Flutter Path Configuration
 * Generated by check-flutter.js
 */

module.exports = {
  flutterPath: "flutter"  // Using system PATH
};
`;
                fs.writeFileSync(path.join(__dirname, 'flutter-config.js'), configContent);
                console.log(`${colors.green}✓${colors.reset} Configuration file created: flutter-config.js`);
                console.log(`${colors.green}✓${colors.reset} You can now run the app with: .\\run-web-app.bat`);
              } catch (e) {
                console.log(`${colors.red}✗${colors.reset} Failed to create configuration file: ${e.message}`);
              }
            } else {
              console.log(`${colors.yellow}Skipping configuration file creation.${colors.reset}`);
              console.log(`${colors.yellow}You can create it later with: .\\fix-flutter-path.bat${colors.reset}`);
            }
            rl.close();
          });
        }
      } else {
        console.log(`${colors.red}✗ Flutter web support might not be enabled${colors.reset}`);
        console.log('');
        console.log(`${colors.yellow}Try enabling web support with:${colors.reset}`);
        console.log(`${colors.yellow}flutter config --enable-web${colors.reset}`);
      }
    });
  }
});
