#!/bin/bash

# Cores para saída colorida
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=========================================================="
echo "      INICIANDO THE OLD READER APP (WEB + PROXY)"
echo -e "==========================================================${NC}"
echo

# Verifica se Flutter está instalado
if ! command -v flutter &> /dev/null; then
  echo -e "${RED}Flutter não encontrado. Por favor, instale o Flutter: https://flutter.dev/docs/get-started/install${NC}"
  exit 1
fi

# Verifica se a pasta proxy existe
if [ ! -d "proxy" ]; then
  echo -e "${YELLOW}Pasta proxy não encontrada. Execute organize-proxy-files.sh primeiro.${NC}"
  exit 1
fi

# Verifica se a porta 3000 está em uso
PORT_CHECK=$(lsof -i:3000 -t)
if [ ! -z "$PORT_CHECK" ]; then
  echo -e "${YELLOW}A porta 3000 já está em uso pelo processo $PORT_CHECK.${NC}"
  echo "Tentaremos uma porta alternativa automaticamente."
fi

# Verifica se a porta 8000 está em uso
PORT_CHECK=$(lsof -i:8000 -t)
if [ ! -z "$PORT_CHECK" ]; then
  echo -e "${YELLOW}A porta 8000 já está em uso pelo processo $PORT_CHECK.${NC}"
  
  read -p "Deseja encerrar este processo? (s/n): " KILL_PROCESS
  if [[ "$KILL_PROCESS" == "s" || "$KILL_PROCESS" == "S" ]]; then
    echo "Encerrando processo $PORT_CHECK..."
    kill -9 $PORT_CHECK
    if [ $? -eq 0 ]; then
      echo -e "${GREEN}Processo encerrado com sucesso.${NC}"
    else
      echo -e "${RED}Falha ao encerrar o processo.${NC}"
      echo "Por favor, encerre o processo manualmente ou escolha outra porta."
      exit 1
    fi
  else
    echo "Operação cancelada pelo usuário."
    exit 1
  fi
fi

# Cria o arquivo de configuração do proxy
echo "Criando arquivo de configuração do proxy..."
cat > lib/proxy_config.dart << EOL
// Generated by direct launcher
// This file will be deleted when the app exits

import 'package:the_old_reader/services/old_reader_api.dart';
import 'package:flutter/foundation.dart' show debugPrint;

void configureProxy() {
  // Set the proxy port to the one that's actually in use
  OldReaderApi.setProxyPort(3000);
  debugPrint('Proxy configured to use port 3000');
}
EOL

# Inicia o proxy em segundo plano
echo "Iniciando o servidor proxy..."
cd proxy
node proxy.js &
PROXY_PID=$!
cd ..

# Aguarda o proxy iniciar
echo "Aguardando o proxy iniciar (3 segundos)..."
sleep 3

# Verifica se o proxy ainda está rodando
if ! kill -0 $PROXY_PID 2>/dev/null; then
  echo -e "${RED}Erro ao iniciar o proxy. Verifique os logs para mais detalhes.${NC}"
  exit 1
fi

echo -e "${GREEN}Proxy iniciado com sucesso na porta 3000.${NC}"

# Inicia o Flutter web app
echo "Iniciando o aplicativo Flutter Web..."
flutter run -d web-server --web-port 8000 --web-hostname 127.0.0.1

# Quando o Flutter terminar, encerra o proxy
echo "Encerrando o proxy..."
kill $PROXY_PID

# Remove o arquivo de configuração temporário
if [ -f "lib/proxy_config.dart" ]; then
  echo "Removendo arquivo de configuração temporário..."
  rm lib/proxy_config.dart
fi

echo -e "${GREEN}Aplicativo encerrado com sucesso.${NC}"
