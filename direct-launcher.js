/**
 * The Old Reader - Direct Launcher
 * 
 * This script launches both the proxy server and Flutter web app using execSync
 * to ensure proper execution on Windows.
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

// Create the proxy configuration file
const proxyConfigPath = path.join(__dirname, 'lib', 'proxy_config.dart');
const proxyConfigContent = `// Generated by direct launcher
// This file will be deleted when the app exits

import 'package:the_old_reader/services/old_reader_api.dart';
import 'package:flutter/foundation.dart' show debugPrint;

void configureProxy() {
  // Set the proxy port to the one that's actually in use
  OldReaderApi.setProxyPort(3000);
  debugPrint('Proxy configured to use port 3000');
}
`;

// Write the proxy config file
fs.writeFileSync(proxyConfigPath, proxyConfigContent);
console.log('Created proxy configuration file');

// Start the proxy server
console.log('Starting proxy server...');
const proxyProcess = spawn('node', ['proxy.js'], {
  stdio: 'inherit',
  shell: true
});

// Wait for the proxy to start
console.log('Waiting for proxy server to start...');
setTimeout(() => {
  try {
    // Get Flutter path from config
    let flutterPath;
    try {
      const config = require('./flutter-config.js');
      flutterPath = config.flutterPath;
      console.log(`Using configured Flutter path: ${flutterPath}`);
    } catch (e) {
      console.error('Error loading Flutter configuration:', e.message);
      proxyProcess.kill();
      process.exit(1);
    }

    // Run Flutter directly with execSync for reliable execution on Windows
    console.log('Starting Flutter web app...');
    execSync(`"${flutterPath}" run -d web-server --web-port 8000 --web-hostname 127.0.0.1`, {
      stdio: 'inherit',
      shell: true
    });
  } catch (error) {
    console.error('Error running Flutter web app:', error.message);
    proxyProcess.kill();
    process.exit(1);
  }
}, 2000);

// Handle process termination
process.on('SIGINT', () => {
  console.log('Shutting down...');
  proxyProcess.kill();
  // Delete proxy config file
  try {
    fs.unlinkSync(proxyConfigPath);
  } catch (e) {
    // Ignore errors when deleting
  }
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('Shutting down...');
  proxyProcess.kill();
  // Delete proxy config file
  try {
    fs.unlinkSync(proxyConfigPath);
  } catch (e) {
    // Ignore errors when deleting
  }
  process.exit(0);
});
